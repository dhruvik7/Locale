{"version":3,"sources":["GeoCentroid/store/store.ts","GeoCentroid/actions/locationEntryActions.ts","GeoCentroid/mutators/locationEntryMutators.ts","GeoCentroid/LocationList.tsx","GeoCentroid/LocationEntry.tsx","Sliders/actions/sliderActions.ts","Sliders/store/store.ts","Sliders/mutators/sliderMutators.ts","Sliders/SliderEntry.tsx","Sliders/SchoolSlider.tsx","GeoCentroid/orchestrators/locationOrchestrators.ts","GeoCentroid/ResultList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getStore","createStore","entries","currentEntry","text","sliderNum","coordinates","submitted","tempLat","tempLon","centroid","latitude","longitude","zipCodes","addNewAddress","action","maintainInput","event","removeAddress","address","submitAddresses","submit","geocode","setCentroid","center","setZipCode","zipcode","mutator","indexOf","actionMessage","target","value","splice","push","lat","lng","length","alert","LocationList","observer","addresses","addressList","map","ListItem","className","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","List","React","Component","LocationEntry","store","FormControl","FormHelperText","id","TextField","name","placeholder","onChange","aria-describedby","Fab","color","maintainSlider","slider","sliderNums","SliderEntry","marks","label","this","props","lowEnd","highEnd","title","desc","Slider","index","SchoolSlider","API_KEY","ZIPCODE_KEY","a","geocodeHelper","centroidHelper","closestZipCode","zipCodeList","urlified","trim","replace","axios","get","concat","response","data","results","geometry","location","coords","coord","getCenter","console","log","latlng","toString","components","address_components","i","types","short_name","centerZip","orchestrator","driver","ResultList","formattedCoords","coordinate","variant","style","size","setTimeout","scroller","scrollTo","smooth","duration","type","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11d815fa.chunk.js","sourcesContent":["import { createStore } from \"satcheljs\";\r\n\r\ninterface Coordinate {\r\n  lat: number;\r\n  lng: number;\r\n}\r\ninterface LocationEntryStore {\r\n  entries: number;\r\n  currentEntry: string;\r\n  text: string[];\r\n  sliderNum: number;\r\n  coordinates: Coordinate[];\r\n  submitted: boolean;\r\n  tempLat: number;\r\n  tempLon: number;\r\n  centroid: { latitude: number; longitude: number };\r\n  zipCodes: string[];\r\n}\r\n\r\nconst getStore = createStore<LocationEntryStore>(\"LocationEntryStore\", {\r\n  entries: 0,\r\n  currentEntry: \"\",\r\n  text: [],\r\n  sliderNum: 50,\r\n  coordinates: [],\r\n  submitted: false,\r\n  tempLat: 0,\r\n  tempLon: 0,\r\n  centroid: { latitude: 0, longitude: 0 },\r\n  zipCodes: []\r\n});\r\n\r\nexport default getStore;\r\n","import { action } from \"satcheljs\";\r\n\r\nexport let addNewAddress = action(\"addNewAddress\");\r\nexport let maintainInput = action(\"maintainInput\", event => ({ event }));\r\nexport let removeAddress = action(\"removeAddress\", (address: string) => ({\r\n  address\r\n}));\r\nexport let submitAddresses = action(\r\n  \"submitAddresses\",\r\n  (latitude: number, longitude: number) => ({ latitude, longitude })\r\n);\r\nexport let submit = action(\"submit\");\r\nexport let geocode = action(\"geocode\");\r\nexport let setCentroid = action(\"setCentroid\", center => ({ center }));\r\nexport let setZipCode = action(\"setZipCode\", zipcode => ({ zipcode }));\r\n","import { mutator } from \"satcheljs\";\r\nimport {\r\n  addNewAddress,\r\n  maintainInput,\r\n  removeAddress,\r\n  submit,\r\n  submitAddresses,\r\n  setCentroid,\r\n  setZipCode\r\n} from \"../actions/locationEntryActions\";\r\nimport getStore from \"../store/store\";\r\n// import { geocode } from \"../services/geocoding\";\r\n\r\nmutator(addNewAddress, () => {\r\n  if (\r\n    getStore().currentEntry !== \"\" &&\r\n    getStore().text.indexOf(getStore().currentEntry) === -1\r\n  ) {\r\n    getStore().text[getStore().entries] = getStore().currentEntry;\r\n    getStore().entries++;\r\n    getStore().currentEntry = \"\";\r\n  }\r\n  getStore().submitted = false;\r\n});\r\n\r\nmutator(maintainInput, actionMessage => {\r\n  getStore().currentEntry = actionMessage.event.target.value;\r\n});\r\n\r\nmutator(removeAddress, actionMessage => {\r\n  getStore().text.splice(getStore().text.indexOf(actionMessage.address), 1);\r\n  getStore().entries--;\r\n  getStore().submitted = false;\r\n});\r\n\r\nmutator(submitAddresses, actionMessage => {\r\n  getStore().coordinates.push({\r\n    lat: actionMessage.latitude,\r\n    lng: actionMessage.longitude\r\n  });\r\n});\r\n\r\nmutator(submit, actionMessage => {\r\n  if (getStore().text.length > 0) {\r\n    getStore().submitted = true;\r\n    getStore().coordinates = [];\r\n    getStore().zipCodes = [];\r\n  } else {\r\n    alert(\"You must add at least one location to proceed with your search\");\r\n  }\r\n});\r\n\r\nmutator(setCentroid, actionMessage => {\r\n  getStore().centroid = actionMessage.center;\r\n});\r\n\r\nmutator(setZipCode, actionMessage => {\r\n  getStore().zipCodes.push(actionMessage.zipcode);\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport getStore from \"./store/store\";\r\nimport { removeAddress } from \"./actions/locationEntryActions\";\r\nimport \"./mutators/locationEntryMutators\";\r\nimport \"./preferenceStyles.css\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\n@observer\r\nclass LocationList extends React.Component<{}> {\r\n  render() {\r\n    const addresses = getStore().text;\r\n    const addressList = addresses.map(address => (\r\n      <ListItem className=\"listItem\">\r\n        <ListItemText primary={address} />\r\n        <ListItemSecondaryAction>\r\n          <IconButton\r\n            edge=\"end\"\r\n            aria-label=\"delete\"\r\n            onClick={() => removeAddress(address)}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    ));\r\n    return addresses.length > 0 ? (\r\n      <div className=\"list\">\r\n        <List>{addressList}</List>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default LocationList;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport getStore from \"./store/store\";\r\nimport { addNewAddress, maintainInput } from \"./actions/locationEntryActions\";\r\nimport \"./mutators/locationEntryMutators\";\r\nimport \"./preferenceStyles.css\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport InputLabel from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport LocationList from \"./LocationList\";\r\n\r\n@observer\r\nclass LocationEntry extends React.Component<{}> {\r\n  render() {\r\n    const store = getStore();\r\n    return (\r\n      <div className=\"entryContainer\">\r\n        <FormControl>\r\n          <InputLabel>Locations</InputLabel>\r\n          <FormHelperText id=\"location-helper\">\r\n            List any addresses or places of significance to you (work,\r\n            friends/family, etc.)\r\n          </FormHelperText>\r\n          <TextField\r\n            name=\"address\"\r\n            placeholder=\"address\"\r\n            value={store.currentEntry}\r\n            onChange={maintainInput}\r\n            id=\"location-input\"\r\n            aria-describedby=\"location-helper\"\r\n          />\r\n\r\n          <div className=\"add\">\r\n            <Fab color=\"primary\" onClick={addNewAddress}>\r\n              Add\r\n            </Fab>\r\n          </div>\r\n        </FormControl>\r\n        <LocationList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationEntry;\r\n","import { action } from \"satcheljs\";\r\nexport let maintainSlider = action(\r\n  \"maintainSlider\",\r\n  (value: number, slider: number) => ({\r\n    value,\r\n    slider\r\n  })\r\n);\r\n","import { createStore } from \"satcheljs\";\r\n\r\ninterface SliderStore {\r\n  sliderNums: number[];\r\n}\r\n\r\nconst getStore = createStore<SliderStore>(\"SliderStore\", {\r\n  sliderNums: [50, 50]\r\n});\r\n\r\nexport default getStore;\r\n","import { mutator } from \"satcheljs\";\r\nimport { maintainSlider } from \"../actions/sliderActions\";\r\nimport getStore from \"../store/store\";\r\n\r\nmutator(maintainSlider, actionMessage => {\r\n  getStore().sliderNums[actionMessage.slider] = actionMessage.value;\r\n});\r\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { maintainSlider } from \"./actions/sliderActions\";\r\nimport \"./mutators/sliderMutators\";\r\n\r\nexport interface SliderEntryProps {\r\n  lowEnd: string;\r\n  highEnd: string;\r\n  title: string;\r\n  desc: string;\r\n  value: number;\r\n  index: number;\r\n}\r\n\r\n@observer\r\nclass SliderEntry extends React.Component<SliderEntryProps> {\r\n  render() {\r\n    const marks = [\r\n      {\r\n        value: 0,\r\n        label: this.props.lowEnd\r\n      },\r\n      {\r\n        value: 100,\r\n        label: this.props.highEnd\r\n      }\r\n    ];\r\n    return (\r\n      <div>\r\n        <h1>{this.props.title}</h1>\r\n        <h3>{this.props.desc}</h3>\r\n        <Slider\r\n          value={this.props.value}\r\n          onChange={(event: React.ChangeEvent<{}>, value: number | number[]) =>\r\n            typeof value === \"number\"\r\n              ? maintainSlider(value, this.props.index)\r\n              : {}\r\n          }\r\n          marks={marks}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SliderEntry;\r\n","import * as React from \"react\";\r\nimport SliderEntry from \"./SliderEntry\";\r\nimport getStore from \"./store/store\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass SchoolSlider extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <SliderEntry\r\n          lowEnd=\"not important\"\r\n          highEnd=\"very important\"\r\n          title=\"schools\"\r\n          desc=\"how important is it for you to live near a top public school district?\"\r\n          value={getStore().sliderNums[0]}\r\n          index={0}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SchoolSlider;\r\n","import { orchestrator } from \"satcheljs\";\r\nimport getStore from \"../store/store\";\r\nimport axios from \"axios\";\r\nimport {\r\n  submitAddresses,\r\n  geocode,\r\n  setCentroid,\r\n  setZipCode\r\n} from \"../actions/locationEntryActions\";\r\nimport \"../mutators/locationEntryMutators\";\r\nimport { getCenter } from \"geolib\";\r\n\r\nconst API_KEY = \"&key=AIzaSyBgdoIxWndrgXxHu2ad3mXGpAjO8O34uJc\";\r\nconst ZIPCODE_KEY = \"552WFK7HVW8DFPNVT28I\";\r\nasync function driver() {\r\n  await geocodeHelper();\r\n  centroidHelper();\r\n  await closestZipCode();\r\n  await zipCodeList();\r\n}\r\n\r\norchestrator(geocode, actionMessage => {\r\n  driver();\r\n});\r\n\r\nasync function geocodeHelper() {\r\n  for (const index in getStore().text) {\r\n    const address = getStore().text[index];\r\n    const urlified = URLify(address);\r\n    const response = await axios.get(\r\n      \"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(\r\n        urlified,\r\n        API_KEY\r\n      )\r\n    );\r\n    if (response.data.results.length > 0) {\r\n      const longitude = response.data.results[0].geometry.location.lng;\r\n      const latitude = response.data.results[0].geometry.location.lat;\r\n      submitAddresses(latitude, longitude);\r\n    }\r\n  }\r\n}\r\n\r\nfunction centroidHelper() {\r\n  let coords = getStore().coordinates.map(coord => ({\r\n    latitude: coord.lat,\r\n    longitude: coord.lng\r\n  }));\r\n  setCentroid(getCenter(coords));\r\n  console.log(getStore().centroid);\r\n}\r\n\r\nasync function closestZipCode() {\r\n  const latlng = getStore()\r\n    .centroid.latitude.toString()\r\n    .concat(\", \", getStore().centroid.longitude.toString());\r\n  const response = await axios.get(\r\n    \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(\r\n      latlng,\r\n      API_KEY\r\n    )\r\n  );\r\n  const components = response.data.results[0].address_components;\r\n  for (var i in components) {\r\n    if (components[i].types[0] === \"postal_code\") {\r\n      setZipCode(components[i].short_name);\r\n      console.log(getStore().zipCodes);\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nasync function zipCodeList() {\r\n  const centerZip = getStore().zipCodes[0];\r\n  const response = await axios.get(\r\n    \"http://api.zip-codes.com/ZipCodesAPI.svc/1.0/FindZipCodesInRadius?zipcode=\".concat(\r\n      centerZip,\r\n      \"&maximumradius=15&minimumradius=0&key=\",\r\n      ZIPCODE_KEY\r\n    )\r\n  );\r\n  console.log(response.data);\r\n}\r\n\r\nfunction URLify(str: string) {\r\n  return str.trim().replace(/\\s/g, \"%20\");\r\n}\r\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport getStore from \"./store/store\";\r\nimport { geocode } from \"./actions/locationEntryActions\";\r\nimport \"./orchestrators/locationOrchestrators\";\r\n\r\ninterface Coordinate {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\n@observer\r\nclass ResultList extends React.Component<{}> {\r\n  async componentDidMount() {\r\n    geocode();\r\n  }\r\n\r\n  render() {\r\n    const formattedCoords = getStore().coordinates.map(coordinate => (\r\n      <li>\r\n        {coordinate.lat},{coordinate.lng}\r\n      </li>\r\n    ));\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <ul>{formattedCoords}</ul>\r\n        {getStore().zipCodes.length > 0 ? getStore().zipCodes[0] : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport LocationEntry from \"./GeoCentroid/LocationEntry\";\nimport { observer } from \"mobx-react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Container from \"react-bootstrap/Container\";\nimport SchoolSlider from \"./Sliders/SchoolSlider\";\nimport { scroller } from \"react-scroll\";\nimport { submit } from \"./GeoCentroid/actions/locationEntryActions\";\nimport ResultList from \"./GeoCentroid/ResultList\";\nimport getStore from \"./GeoCentroid/store/store\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Welcome to Locale\n        <div className=\"Sub-header\">find your perfect neighborhood</div>\n        <Fab\n          variant=\"extended\"\n          style={{ color: \"#aaaaaa\" }}\n          size=\"large\"\n          onClick={() => scrollTo()}\n        >\n          get started\n        </Fab>\n      </header>\n      <div className=\"content\">\n        <div className=\"intro\">\n          <p>\n            personalize the information below to discover the perfect\n            neighborhood for you\n          </p>\n        </div>\n        <Container className=\"locationContainer\">\n          <LocationEntry />\n        </Container>\n        <Container className=\"sliderContainer\">\n          <SchoolSlider />\n        </Container>\n        <Fab type=\"submit\" onClick={submit}>\n          Submit\n        </Fab>\n        {getStore().submitted ? <ResultList /> : null}\n      </div>\n    </div>\n  );\n};\n\nfunction scrollTo(): void {\n  setTimeout(() => {\n    scroller.scrollTo(\"content\", {\n      smooth: true,\n      duration: 800\n    });\n  }, 1);\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}